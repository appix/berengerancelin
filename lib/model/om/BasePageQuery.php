<?php


/**
 * Base class that represents a query for the 'page' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.6.4 on:
 *
 * Sun Sep 30 15:11:47 2012
 *
 * @method     PageQuery orderById($order = Criteria::ASC) Order by the id column
 * @method     PageQuery orderByName($order = Criteria::ASC) Order by the name column
 * @method     PageQuery orderBySlug($order = Criteria::ASC) Order by the slug column
 * @method     PageQuery orderByMenuIndex($order = Criteria::ASC) Order by the menu_index column
 * @method     PageQuery orderByContent($order = Criteria::ASC) Order by the content column
 * @method     PageQuery orderByLanguage($order = Criteria::ASC) Order by the language column
 * @method     PageQuery orderByPublished($order = Criteria::ASC) Order by the published column
 * @method     PageQuery orderByHomepage($order = Criteria::ASC) Order by the homepage column
 *
 * @method     PageQuery groupById() Group by the id column
 * @method     PageQuery groupByName() Group by the name column
 * @method     PageQuery groupBySlug() Group by the slug column
 * @method     PageQuery groupByMenuIndex() Group by the menu_index column
 * @method     PageQuery groupByContent() Group by the content column
 * @method     PageQuery groupByLanguage() Group by the language column
 * @method     PageQuery groupByPublished() Group by the published column
 * @method     PageQuery groupByHomepage() Group by the homepage column
 *
 * @method     PageQuery leftJoin($relation) Adds a LEFT JOIN clause to the query
 * @method     PageQuery rightJoin($relation) Adds a RIGHT JOIN clause to the query
 * @method     PageQuery innerJoin($relation) Adds a INNER JOIN clause to the query
 *
 * @method     Page findOne(PropelPDO $con = null) Return the first Page matching the query
 * @method     Page findOneOrCreate(PropelPDO $con = null) Return the first Page matching the query, or a new Page object populated from the query conditions when no match is found
 *
 * @method     Page findOneById(int $id) Return the first Page filtered by the id column
 * @method     Page findOneByName(string $name) Return the first Page filtered by the name column
 * @method     Page findOneBySlug(string $slug) Return the first Page filtered by the slug column
 * @method     Page findOneByMenuIndex(int $menu_index) Return the first Page filtered by the menu_index column
 * @method     Page findOneByContent(string $content) Return the first Page filtered by the content column
 * @method     Page findOneByLanguage(string $language) Return the first Page filtered by the language column
 * @method     Page findOneByPublished(boolean $published) Return the first Page filtered by the published column
 * @method     Page findOneByHomepage(boolean $homepage) Return the first Page filtered by the homepage column
 *
 * @method     array findById(int $id) Return Page objects filtered by the id column
 * @method     array findByName(string $name) Return Page objects filtered by the name column
 * @method     array findBySlug(string $slug) Return Page objects filtered by the slug column
 * @method     array findByMenuIndex(int $menu_index) Return Page objects filtered by the menu_index column
 * @method     array findByContent(string $content) Return Page objects filtered by the content column
 * @method     array findByLanguage(string $language) Return Page objects filtered by the language column
 * @method     array findByPublished(boolean $published) Return Page objects filtered by the published column
 * @method     array findByHomepage(boolean $homepage) Return Page objects filtered by the homepage column
 *
 * @package    propel.generator.lib.model.om
 */
abstract class BasePageQuery extends ModelCriteria
{
	
	/**
	 * Initializes internal state of BasePageQuery object.
	 *
	 * @param     string $dbName The dabase name
	 * @param     string $modelName The phpName of a model, e.g. 'Book'
	 * @param     string $modelAlias The alias for the model in this query, e.g. 'b'
	 */
	public function __construct($dbName = 'propel', $modelName = 'Page', $modelAlias = null)
	{
		parent::__construct($dbName, $modelName, $modelAlias);
	}

	/**
	 * Returns a new PageQuery object.
	 *
	 * @param     string $modelAlias The alias of a model in the query
	 * @param     Criteria $criteria Optional Criteria to build the query from
	 *
	 * @return    PageQuery
	 */
	public static function create($modelAlias = null, $criteria = null)
	{
		if ($criteria instanceof PageQuery) {
			return $criteria;
		}
		$query = new PageQuery();
		if (null !== $modelAlias) {
			$query->setModelAlias($modelAlias);
		}
		if ($criteria instanceof Criteria) {
			$query->mergeWith($criteria);
		}
		return $query;
	}

	/**
	 * Find object by primary key.
	 * Propel uses the instance pool to skip the database if the object exists.
	 * Go fast if the query is untouched.
	 *
	 * <code>
	 * $obj  = $c->findPk(12, $con);
	 * </code>
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    Page|array|mixed the result, formatted by the current formatter
	 */
	public function findPk($key, $con = null)
	{
		if ($key === null) {
			return null;
		}
		if ((null !== ($obj = PagePeer::getInstanceFromPool((string) $key))) && !$this->formatter) {
			// the object is alredy in the instance pool
			return $obj;
		}
		if ($con === null) {
			$con = Propel::getConnection(PagePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		if ($this->formatter || $this->modelAlias || $this->with || $this->select
		 || $this->selectColumns || $this->asColumns || $this->selectModifiers
		 || $this->map || $this->having || $this->joins) {
			return $this->findPkComplex($key, $con);
		} else {
			return $this->findPkSimple($key, $con);
		}
	}

	/**
	 * Find object by primary key using raw SQL to go fast.
	 * Bypass doSelect() and the object formatter by using generated code.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    Page A model object, or null if the key is not found
	 */
	protected function findPkSimple($key, $con)
	{
		$sql = 'SELECT `ID`, `NAME`, `SLUG`, `MENU_INDEX`, `CONTENT`, `LANGUAGE`, `PUBLISHED`, `HOMEPAGE` FROM `page` WHERE `ID` = :p0';
		try {
			$stmt = $con->prepare($sql);
			$stmt->bindValue(':p0', $key, PDO::PARAM_INT);
			$stmt->execute();
		} catch (Exception $e) {
			Propel::log($e->getMessage(), Propel::LOG_ERR);
			throw new PropelException(sprintf('Unable to execute SELECT statement [%s]', $sql), $e);
		}
		$obj = null;
		if ($row = $stmt->fetch(PDO::FETCH_NUM)) {
			$obj = new Page();
			$obj->hydrate($row);
			PagePeer::addInstanceToPool($obj, (string) $row[0]);
		}
		$stmt->closeCursor();

		return $obj;
	}

	/**
	 * Find object by primary key.
	 *
	 * @param     mixed $key Primary key to use for the query
	 * @param     PropelPDO $con A connection object
	 *
	 * @return    Page|array|mixed the result, formatted by the current formatter
	 */
	protected function findPkComplex($key, $con)
	{
		// As the query uses a PK condition, no limit(1) is necessary.
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKey($key)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->formatOne($stmt);
	}

	/**
	 * Find objects by primary key
	 * <code>
	 * $objs = $c->findPks(array(12, 56, 832), $con);
	 * </code>
	 * @param     array $keys Primary keys to use for the query
	 * @param     PropelPDO $con an optional connection object
	 *
	 * @return    PropelObjectCollection|array|mixed the list of results, formatted by the current formatter
	 */
	public function findPks($keys, $con = null)
	{
		if ($con === null) {
			$con = Propel::getConnection($this->getDbName(), Propel::CONNECTION_READ);
		}
		$this->basePreSelect($con);
		$criteria = $this->isKeepQuery() ? clone $this : $this;
		$stmt = $criteria
			->filterByPrimaryKeys($keys)
			->doSelect($con);
		return $criteria->getFormatter()->init($criteria)->format($stmt);
	}

	/**
	 * Filter the query by primary key
	 *
	 * @param     mixed $key Primary key to use for the query
	 *
	 * @return    PageQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKey($key)
	{
		return $this->addUsingAlias(PagePeer::ID, $key, Criteria::EQUAL);
	}

	/**
	 * Filter the query by a list of primary keys
	 *
	 * @param     array $keys The list of primary key to use for the query
	 *
	 * @return    PageQuery The current query, for fluid interface
	 */
	public function filterByPrimaryKeys($keys)
	{
		return $this->addUsingAlias(PagePeer::ID, $keys, Criteria::IN);
	}

	/**
	 * Filter the query on the id column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterById(1234); // WHERE id = 1234
	 * $query->filterById(array(12, 34)); // WHERE id IN (12, 34)
	 * $query->filterById(array('min' => 12)); // WHERE id > 12
	 * </code>
	 *
	 * @param     mixed $id The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PageQuery The current query, for fluid interface
	 */
	public function filterById($id = null, $comparison = null)
	{
		if (is_array($id) && null === $comparison) {
			$comparison = Criteria::IN;
		}
		return $this->addUsingAlias(PagePeer::ID, $id, $comparison);
	}

	/**
	 * Filter the query on the name column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByName('fooValue');   // WHERE name = 'fooValue'
	 * $query->filterByName('%fooValue%'); // WHERE name LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $name The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PageQuery The current query, for fluid interface
	 */
	public function filterByName($name = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($name)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $name)) {
				$name = str_replace('*', '%', $name);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(PagePeer::NAME, $name, $comparison);
	}

	/**
	 * Filter the query on the slug column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterBySlug('fooValue');   // WHERE slug = 'fooValue'
	 * $query->filterBySlug('%fooValue%'); // WHERE slug LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $slug The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PageQuery The current query, for fluid interface
	 */
	public function filterBySlug($slug = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($slug)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $slug)) {
				$slug = str_replace('*', '%', $slug);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(PagePeer::SLUG, $slug, $comparison);
	}

	/**
	 * Filter the query on the menu_index column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByMenuIndex(1234); // WHERE menu_index = 1234
	 * $query->filterByMenuIndex(array(12, 34)); // WHERE menu_index IN (12, 34)
	 * $query->filterByMenuIndex(array('min' => 12)); // WHERE menu_index > 12
	 * </code>
	 *
	 * @param     mixed $menuIndex The value to use as filter.
	 *              Use scalar values for equality.
	 *              Use array values for in_array() equivalent.
	 *              Use associative array('min' => $minValue, 'max' => $maxValue) for intervals.
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PageQuery The current query, for fluid interface
	 */
	public function filterByMenuIndex($menuIndex = null, $comparison = null)
	{
		if (is_array($menuIndex)) {
			$useMinMax = false;
			if (isset($menuIndex['min'])) {
				$this->addUsingAlias(PagePeer::MENU_INDEX, $menuIndex['min'], Criteria::GREATER_EQUAL);
				$useMinMax = true;
			}
			if (isset($menuIndex['max'])) {
				$this->addUsingAlias(PagePeer::MENU_INDEX, $menuIndex['max'], Criteria::LESS_EQUAL);
				$useMinMax = true;
			}
			if ($useMinMax) {
				return $this;
			}
			if (null === $comparison) {
				$comparison = Criteria::IN;
			}
		}
		return $this->addUsingAlias(PagePeer::MENU_INDEX, $menuIndex, $comparison);
	}

	/**
	 * Filter the query on the content column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByContent('fooValue');   // WHERE content = 'fooValue'
	 * $query->filterByContent('%fooValue%'); // WHERE content LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $content The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PageQuery The current query, for fluid interface
	 */
	public function filterByContent($content = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($content)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $content)) {
				$content = str_replace('*', '%', $content);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(PagePeer::CONTENT, $content, $comparison);
	}

	/**
	 * Filter the query on the language column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByLanguage('fooValue');   // WHERE language = 'fooValue'
	 * $query->filterByLanguage('%fooValue%'); // WHERE language LIKE '%fooValue%'
	 * </code>
	 *
	 * @param     string $language The value to use as filter.
	 *              Accepts wildcards (* and % trigger a LIKE)
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PageQuery The current query, for fluid interface
	 */
	public function filterByLanguage($language = null, $comparison = null)
	{
		if (null === $comparison) {
			if (is_array($language)) {
				$comparison = Criteria::IN;
			} elseif (preg_match('/[\%\*]/', $language)) {
				$language = str_replace('*', '%', $language);
				$comparison = Criteria::LIKE;
			}
		}
		return $this->addUsingAlias(PagePeer::LANGUAGE, $language, $comparison);
	}

	/**
	 * Filter the query on the published column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByPublished(true); // WHERE published = true
	 * $query->filterByPublished('yes'); // WHERE published = true
	 * </code>
	 *
	 * @param     boolean|string $published The value to use as filter.
	 *              Non-boolean arguments are converted using the following rules:
	 *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PageQuery The current query, for fluid interface
	 */
	public function filterByPublished($published = null, $comparison = null)
	{
		if (is_string($published)) {
			$published = in_array(strtolower($published), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
		}
		return $this->addUsingAlias(PagePeer::PUBLISHED, $published, $comparison);
	}

	/**
	 * Filter the query on the homepage column
	 *
	 * Example usage:
	 * <code>
	 * $query->filterByHomepage(true); // WHERE homepage = true
	 * $query->filterByHomepage('yes'); // WHERE homepage = true
	 * </code>
	 *
	 * @param     boolean|string $homepage The value to use as filter.
	 *              Non-boolean arguments are converted using the following rules:
	 *                * 1, '1', 'true',  'on',  and 'yes' are converted to boolean true
	 *                * 0, '0', 'false', 'off', and 'no'  are converted to boolean false
	 *              Check on string values is case insensitive (so 'FaLsE' is seen as 'false').
	 * @param     string $comparison Operator to use for the column comparison, defaults to Criteria::EQUAL
	 *
	 * @return    PageQuery The current query, for fluid interface
	 */
	public function filterByHomepage($homepage = null, $comparison = null)
	{
		if (is_string($homepage)) {
			$homepage = in_array(strtolower($homepage), array('false', 'off', '-', 'no', 'n', '0', '')) ? false : true;
		}
		return $this->addUsingAlias(PagePeer::HOMEPAGE, $homepage, $comparison);
	}

	/**
	 * Exclude object from result
	 *
	 * @param     Page $page Object to remove from the list of results
	 *
	 * @return    PageQuery The current query, for fluid interface
	 */
	public function prune($page = null)
	{
		if ($page) {
			$this->addUsingAlias(PagePeer::ID, $page->getId(), Criteria::NOT_EQUAL);
		}

		return $this;
	}

} // BasePageQuery